package userhandler

import (
	"context"

	"github.com/Ali-Assar/CashWatch/db"
	pb "github.com/Ali-Assar/CashWatch/types"
	"github.com/go-playground/validator"
	"github.com/golang/protobuf/ptypes/empty"
	"golang.org/x/crypto/bcrypt"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type UserServiceServer struct {
	pb.UnimplementedUserServiceServer
	UserStore db.UserStorer
}

func (s *UserServiceServer) InsertUser(ctx context.Context, req *pb.User) (*pb.User, error) {
	// Validate request
	validate := validator.New()
	if err := validate.Struct(req); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "Validation error: %v", err)
	}

	// Hash the password
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "Error hashing password: %v", err)
	}

	// Create a new user
	user := &pb.User{
		// Id:                123, // Replace with actual user ID (e.g., generated by your DB)
		FirstName: req.FirstName,
		LastName:  req.LastName,
		Email:     req.Email,
		Password:  string(hashedPassword),
	}
	insertedUser, err := s.UserStore.InsertUser(ctx, user)
	if err != nil {
		return nil, err
	}

	return &pb.User{ID: insertedUser.ID}, nil
}

func (s *UserServiceServer) DeleteUserByEmail(ctx context.Context, req *pb.UserRequest) (*empty.Empty, error) {
	// Validate request
	validate := validator.New()
	if err := validate.Struct(req); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "Validation error: %v", err)
	}

	if err := s.UserStore.DeleteUser(ctx, req.GetEmail()); err != nil {
		return nil, err
	}
	return &empty.Empty{}, nil
}

func (s *UserServiceServer) GetUserByEmail(ctx context.Context, req *pb.UserRequest) (*pb.User, error) {
	validate := validator.New()
	if err := validate.Struct(req); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "Validation error: %v", err)
	}

	fetchedUser, err := s.UserStore.GetUserByEmail(ctx, req.GetEmail())
	if err != nil {
		return nil, err
	}

	return &pb.User{
		Email:     fetchedUser.Email,
		FirstName: fetchedUser.FirstName,
		LastName:  fetchedUser.LastName,
		Password:  ""}, nil
}
func (s *UserServiceServer) UpdateUserByEmail(ctx context.Context, req *pb.UpdateUserRequest) (*empty.Empty, error) {
	validate := validator.New()
	if err := validate.Struct(req); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "Validation error: %v", err)
	}

	// user := &pb.UpdateUserRequest{
	// 	FirstName: req.FirstName,
	// 	LastName:  req.LastName,
	// }

	err := s.UserStore.UpdateUserByEmail(ctx, req.GetEmail(), req)
	if err != nil {
		return nil, err
	}

	return &empty.Empty{}, nil
}
