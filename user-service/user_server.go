package main

import (
	"context"
	"log"
	"net"

	"github.com/Ali-Assar/CashWatch/authentication-service/db"
	pb "github.com/Ali-Assar/CashWatch/types"
	"github.com/go-playground/validator"
	"golang.org/x/crypto/bcrypt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type userServiceServer struct {
	pb.UnimplementedUserServiceServer
	userStore db.UserStorer
}

func (s *userServiceServer) InsertUser(ctx context.Context, req *pb.User) (*pb.User, error) {
	// Validate request
	validate := validator.New()
	if err := validate.Struct(req); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "Validation error: %v", err)
	}

	// Hash the password
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "Error hashing password: %v", err)
	}

	// Create a new user
	user := &pb.User{
		// Id:                123, // Replace with actual user ID (e.g., generated by your DB)
		FirstName: req.FirstName,
		LastName:  req.LastName,
		Email:     req.Email,
		Password:  string(hashedPassword),
	}
	insertedUser, err := s.userStore.InsertUser(ctx, user)
	if err != nil {
		return nil, err
	}

	return &pb.User{ID: insertedUser.ID}, nil
}

func (s *userServiceServer) DeleteUserByID(ctx context.Context, req *pb.UserRequest) (*pb.User, error) {
	// Implement the logic to delete a user by ID from your database
	// Return an Empty response (or an error if something goes wrong)
	return nil, nil
}

func (s *userServiceServer) GetUserByID(ctx context.Context, req *pb.UserRequest) (*pb.User, error) {
	// Implement the logic to delete a user by ID from your database
	// Return an Empty response (or an error if something goes wrong)
	return nil, nil
}
func (s *userServiceServer) UpdateUserByID(ctx context.Context, req *pb.User) (*pb.User, error) {
	// Implement the logic to delete a user by ID from your database
	// Return an Empty response (or an error if something goes wrong)
	return nil, nil
}

func main() {
	database, err := db.InitDB()
	if err != nil {
		log.Fatal(err)
	}
	defer database.Close()

	server := grpc.NewServer()
	userStore := db.NewPostgreSQLUserStore(database)
	pb.RegisterUserServiceServer(server, &userServiceServer{
		userStore: userStore,
	})

	// Listen on a port
	listener, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("Error creating listener: %v", err)
	}
	log.Println("gRPC server listening on :50051")

	// Start serving requests
	if err := server.Serve(listener); err != nil {
		log.Fatalf("Error serving: %v", err)
	}
}
