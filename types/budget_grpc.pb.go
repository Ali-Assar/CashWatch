// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: types/budget.proto

package types

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BudgetServiceClient is the client API for BudgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BudgetServiceClient interface {
	InsertBudget(ctx context.Context, in *Budget, opts ...grpc.CallOption) (*Budget, error)
	GetBudgetByID(ctx context.Context, in *BudgetRequest, opts ...grpc.CallOption) (*Budget, error)
	UpdateBudgetrByID(ctx context.Context, in *Budget, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteBudgetByID(ctx context.Context, in *BudgetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	InsertIncome(ctx context.Context, in *Income, opts ...grpc.CallOption) (*Income, error)
	GetIncomeByID(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*Income, error)
	UpdateIncomeByID(ctx context.Context, in *Income, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteIncomeByID(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type budgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBudgetServiceClient(cc grpc.ClientConnInterface) BudgetServiceClient {
	return &budgetServiceClient{cc}
}

func (c *budgetServiceClient) InsertBudget(ctx context.Context, in *Budget, opts ...grpc.CallOption) (*Budget, error) {
	out := new(Budget)
	err := c.cc.Invoke(ctx, "/users.BudgetService/InsertBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) GetBudgetByID(ctx context.Context, in *BudgetRequest, opts ...grpc.CallOption) (*Budget, error) {
	out := new(Budget)
	err := c.cc.Invoke(ctx, "/users.BudgetService/GetBudgetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) UpdateBudgetrByID(ctx context.Context, in *Budget, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/users.BudgetService/UpdateBudgetrByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeleteBudgetByID(ctx context.Context, in *BudgetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/users.BudgetService/DeleteBudgetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) InsertIncome(ctx context.Context, in *Income, opts ...grpc.CallOption) (*Income, error) {
	out := new(Income)
	err := c.cc.Invoke(ctx, "/users.BudgetService/InsertIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) GetIncomeByID(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*Income, error) {
	out := new(Income)
	err := c.cc.Invoke(ctx, "/users.BudgetService/GetIncomeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) UpdateIncomeByID(ctx context.Context, in *Income, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/users.BudgetService/UpdateIncomeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeleteIncomeByID(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/users.BudgetService/DeleteIncomeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BudgetServiceServer is the server API for BudgetService service.
// All implementations must embed UnimplementedBudgetServiceServer
// for forward compatibility
type BudgetServiceServer interface {
	InsertBudget(context.Context, *Budget) (*Budget, error)
	GetBudgetByID(context.Context, *BudgetRequest) (*Budget, error)
	UpdateBudgetrByID(context.Context, *Budget) (*empty.Empty, error)
	DeleteBudgetByID(context.Context, *BudgetRequest) (*empty.Empty, error)
	InsertIncome(context.Context, *Income) (*Income, error)
	GetIncomeByID(context.Context, *IncomeRequest) (*Income, error)
	UpdateIncomeByID(context.Context, *Income) (*empty.Empty, error)
	DeleteIncomeByID(context.Context, *IncomeRequest) (*empty.Empty, error)
	mustEmbedUnimplementedBudgetServiceServer()
}

// UnimplementedBudgetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBudgetServiceServer struct {
}

func (UnimplementedBudgetServiceServer) InsertBudget(context.Context, *Budget) (*Budget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBudget not implemented")
}
func (UnimplementedBudgetServiceServer) GetBudgetByID(context.Context, *BudgetRequest) (*Budget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudgetByID not implemented")
}
func (UnimplementedBudgetServiceServer) UpdateBudgetrByID(context.Context, *Budget) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudgetrByID not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteBudgetByID(context.Context, *BudgetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudgetByID not implemented")
}
func (UnimplementedBudgetServiceServer) InsertIncome(context.Context, *Income) (*Income, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertIncome not implemented")
}
func (UnimplementedBudgetServiceServer) GetIncomeByID(context.Context, *IncomeRequest) (*Income, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeByID not implemented")
}
func (UnimplementedBudgetServiceServer) UpdateIncomeByID(context.Context, *Income) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncomeByID not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteIncomeByID(context.Context, *IncomeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncomeByID not implemented")
}
func (UnimplementedBudgetServiceServer) mustEmbedUnimplementedBudgetServiceServer() {}

// UnsafeBudgetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BudgetServiceServer will
// result in compilation errors.
type UnsafeBudgetServiceServer interface {
	mustEmbedUnimplementedBudgetServiceServer()
}

func RegisterBudgetServiceServer(s grpc.ServiceRegistrar, srv BudgetServiceServer) {
	s.RegisterService(&BudgetService_ServiceDesc, srv)
}

func _BudgetService_InsertBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Budget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).InsertBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/InsertBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).InsertBudget(ctx, req.(*Budget))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_GetBudgetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).GetBudgetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/GetBudgetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).GetBudgetByID(ctx, req.(*BudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_UpdateBudgetrByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Budget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).UpdateBudgetrByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/UpdateBudgetrByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).UpdateBudgetrByID(ctx, req.(*Budget))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeleteBudgetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteBudgetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/DeleteBudgetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteBudgetByID(ctx, req.(*BudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_InsertIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Income)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).InsertIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/InsertIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).InsertIncome(ctx, req.(*Income))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_GetIncomeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).GetIncomeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/GetIncomeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).GetIncomeByID(ctx, req.(*IncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_UpdateIncomeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Income)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).UpdateIncomeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/UpdateIncomeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).UpdateIncomeByID(ctx, req.(*Income))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeleteIncomeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteIncomeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BudgetService/DeleteIncomeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteIncomeByID(ctx, req.(*IncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BudgetService_ServiceDesc is the grpc.ServiceDesc for BudgetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BudgetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.BudgetService",
	HandlerType: (*BudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertBudget",
			Handler:    _BudgetService_InsertBudget_Handler,
		},
		{
			MethodName: "GetBudgetByID",
			Handler:    _BudgetService_GetBudgetByID_Handler,
		},
		{
			MethodName: "UpdateBudgetrByID",
			Handler:    _BudgetService_UpdateBudgetrByID_Handler,
		},
		{
			MethodName: "DeleteBudgetByID",
			Handler:    _BudgetService_DeleteBudgetByID_Handler,
		},
		{
			MethodName: "InsertIncome",
			Handler:    _BudgetService_InsertIncome_Handler,
		},
		{
			MethodName: "GetIncomeByID",
			Handler:    _BudgetService_GetIncomeByID_Handler,
		},
		{
			MethodName: "UpdateIncomeByID",
			Handler:    _BudgetService_UpdateIncomeByID_Handler,
		},
		{
			MethodName: "DeleteIncomeByID",
			Handler:    _BudgetService_DeleteIncomeByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/budget.proto",
}
